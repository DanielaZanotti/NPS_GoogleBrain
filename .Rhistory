library(fdakma)
help(kmap.compare)
help(kmap)
help(fdakma)
library(fdakmapp)
help(fdakmapp)
help("read.table")
library(roahd)
data = read.table("train.csv",header=TRUE,sep=",")
head(data)
attach(data)
#pressure in
func_data1=data.frame()
j=1
for(i in seq(1,80000,80) ){
x1=data[i:(i+79),6]
func_data1[j,1:80]=x1
j=j+1
}
grid <-  seq( 1, 80)
f_data1 <- fData(grid,func_data1)
#pressure out
func_data2=data.frame()
j=1
for(i in seq(1,6640,80) ){
x2=data[i:(i+79),7]
func_data2[j,1:80]=x2
j=j+1
}
grid <-  seq( 1, 80)
f_data2 <- fData(grid,func_data2)
#pressure
func_data3=data.frame()
j=1
for(i in seq(1,6640,80) ){
x3=data[i:(i+79),8]
func_data3[j,1:80]=x3
j=j+1
}
grid <-  seq( 1, 80)
f_data3 <- fData(grid,func_data3)
x11()
par(mfcol = c(1,3))
plot(f_data1,main="in")
plot(f_data2,main="out")
plot(f_data3,main="pressure")
times=data.frame()
j=1
for(i in seq(1,80000,80) ){
tim=data[i:(i+79),5]
times[j,1:80]=tim
j=j+1
}
times2=as.matrix(times)
ff=as.matrix(func_data1)
library(fdakmapp)
fdakma_example <- kmap.compare(
x=times2, y = ff, n_clust = 1:3,
warping_method = 'affine',
similarity_method = 'pearson',  # similarity computed as the cosine
# between the first derivatives
# (correlation)
center_method = 'mean',
plot.graph=1
# seeds = c(3,18) # you can give a little help to the algorithm...
)
