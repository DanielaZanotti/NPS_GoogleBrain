test_until1$tot_u_in <- 0
for (i in unique(test_until1$breath_id)) {
test_until1[which(test_until1$breath_id==i), 'tot_u_in'] <- cumsum(test_until1[which(test_until1$breath_id==i),6])
}
### FIRST AND LAST VALUE OF u_in
train_until1$last_u_in <- 0
for( i in  unique(train_until1$breath_id))
{
x = train_until1[which(train_until1$breath_id==i), ]
l = dim(x)[1]
train_until1[which(train_until1$breath_id==i), 'last_u_in'] <- x[l,'u_in']
}
train_until1$first_u_in <- 0
for( i in unique(train_until1$breath_id))
{
x = train_until1[which(train_until1$breath_id==i), ]
train_until1[which(train_until1$breath_id==i), 'first_u_in'] <- x[1,'u_in']
}
test_until1$last_u_in <- 0
for( i in  unique(test_until1$breath_id))
{
x = test_until1[which(test_until1$breath_id==i), ]
l = dim(x)[1]
test_until1[which(test_until1$breath_id==i), 'last_u_in'] <- x[l,'u_in']
}
test_until1$first_u_in <- 0
for( i in unique(test_until1$breath_id))
{
x = test_until1[which(test_until1$breath_id==i), ]
test_until1[which(test_until1$breath_id==i), 'first_u_in'] <- x[1,'u_in']
}
### MAX VALUE OF u_in FOR EACH BREATH
train_until1$max_u_in <- 0
for (i in unique(train_until1$breath_id)) {
mx <- max(train_until1[which(train_until1$breath_id==i), 'u_in'])
train_until1[which(train_until1$breath_id==i), 'max_u_in'] <- mx
}
test_until1$max_u_in <- 0
for (i in unique(test_until1$breath_id)) {
mx <- max(test_until1[which(test_until1$breath_id==i), 'u_in'])
test_until1[which(test_until1$breath_id==i), 'max_u_in'] <- mx
}
### DIFFERENCE BETWEEN CONSECUTIVE VALUES
train_until1$u_in_diff1 <- 0
train_until1$u_in_diff2 <- 0
for (i in unique(train_until1$breath_id)) {
xx <- train_until1[which(train_until1$breath_id==i), 'u_in']
l <- length(xx)
shift <- c(0, 0, xx)
train_until1[which(train_until1$breath_id==i), 'u_in_diff1'] <- shift[3:(l+2)] - shift[2:(l+1)]
train_until1[which(train_until1$breath_id==i), 'u_in_diff2'] <- shift[3:(l+2)] - shift[1:l]
}
test_until1$u_in_diff1 <- 0
test_until1$u_in_diff2 <- 0
for (i in unique(test_until1$breath_id)) {
xx <- test_until1[which(test_until1$breath_id==i), 'u_in']
l <- length(xx)
shift <- c(0, 0, xx)
test_until1[which(test_until1$breath_id==i), 'u_in_diff1'] <- shift[3:(l+2)] - shift[2:(l+1)]
test_until1[which(test_until1$breath_id==i), 'u_in_diff2'] <- shift[3:(l+2)] - shift[1:l]
}
### DIFFERENCE BETWEEN CURRENT VALUE OF u_in AND THE MAX VALUE WITHIN THE BREATH
train_until1$u_in_diff_max <- 0
for (i in unique(train_until1$breath_id)) {
train_until1[which(train_until1$breath_id==i), 'u_in_diff_max'] <- train_until1[which(train_until1$breath_id==i), 'u_in'] - train_until1[which(train_until1$breath_id==i), 'max_u_in']
}
test_until1$u_in_diff_max <- 0
for (i in unique(test_until1$breath_id)) {
test_until1[which(test_until1$breath_id==i), 'u_in_diff_max'] <- test_until1[which(test_until1$breath_id==i), 'u_in'] - test_until1[which(test_until1$breath_id==i), 'max_u_in']
}
### NUMBER OF CHANGE OF SIGN
train_until1$n_change_sign_u_in <- 0
for (i in unique(train_until1$breath_id)) {
x <- train_until1[which(train_until1$breath_id==i), 'u_in_diff1']
signs <- sign(x)
ss <- sum(signs[-1] != signs[-length(x)])
train_until1[which(train_until1$breath_id==i), 'n_change_sign_u_in'] <- ss
}
test_until1$n_change_sign_u_in <- 0
for (i in unique(test_until1$breath_id)) {
x <- test_until1[which(test_until1$breath_id==i), 'u_in_diff1']
signs <- sign(x)
ss <- sum(signs[-1] != signs[-length(x)])
test_until1[which(test_until1$breath_id==i), 'n_change_sign_u_in'] <- ss
}
ts = data.frame()
for(i in unique(train_until1$breath_id))
{
x1 = train_until1[which(train_until1$breath_id==i), ]
l = dim(x1)[1]
ts = rbind(ts, x1[l,])
}
View(ts)
###################### PCA ################################
### PCA
ts = data.frame()
for(i in unique(train_until1$breath_id))
{
x1 = train_until1[which(train_until1$breath_id==i), ]
l = dim(x1)[1]
ts = rbind(ts, x1[l,])
}
x11()
pairs(ts[10:17])
variab=ts[,10:17]
variab.sd <- scale(variab)
variab.sd <- data.frame(variab.sd)
pca <- princomp(variab.sd, scores=T)
summary(pca)
d=pca$scores
load <- pca$loadings
load
# graphical representation of the loadings of the first 3 principal components
x11()
par(mfcol = c(3,1))
for(i in 1:3) barplot(load[,i], ylim = c(-1, 1), main=paste("PC",i))
x11()
layout(matrix(c(2,3,1,3),2,byrow=T))
plot(pca, las=2, main='Principal components', ylim=c(0,5))
barplot(sapply(ts[,9:16],sd)^2, las=2, main='Original Variables', ylim=c(0,4.5e4), ylab='Variances')
plot(cumsum(pca$sd^2)/sum(pca$sd^2), type='b', axes=F, xlab='number of components',
ylab='contribution to the total variance', ylim=c(0,1))
abline(h=1, col='blue')
abline(h=0.8, lty=2, col='blue')
box()
axis(2,at=0:10/10,labels=0:10/10)
axis(1,at=1:ncol(ts[,9:16]),labels=1:ncol(ts[,9:16]),las=2)
scores.wea <- pc$scores
scores.wea
ts_train = data.frame()
for(i in unique(train_until1$breath_id))
{
x1 = train_until1[which(train_until1$breath_id==i), ]
l = dim(x1)[1]
ts_train = rbind(ts_train, x1[l,])
}
ts_test = data.frame()
for(i in unique(test_until1$breath_id))
{
x1 = test_until1[which(test_until1$breath_id==i), ]
l = dim(x1)[1]
ts_test = rbind(ts_test, x1[l,])
}
x11()
pairs(ts[10:17])
tr_te <- rbind(ts_train, ts_test)
cl.e <- dist(tr_te[10:17], method='euclidean')
cl.ew <- hclust(cl.e, method='ward')
plot(cl.ew, main='euclidean-ward', hang=-0.1, xlab='', labels=F, cex=0.6, sub='')
rect.hclust(cl.ew, k=2)
cluster.ew <- cutree(cl.ew, k=3)
coph <- cophenetic(cl.ew)
cor(coph, cl.e)
j = 1
for(i in unique(train_until1$breath_id))
{
train_until1[which(train_until1$breath_id==i), 'clust'] = cluster.ew[j]
j = j+1
}
for(i in unique(test_until1$breath_id))
{
test_until1[which(test_until1$breath_id==i), 'clust'] = cluster.ew[j]
j = j+1
}
#time
func_data1=data.frame()
for(i in unique(train_until1$breath_id)  ){
x1=train_until1[which(train_until1$breath_id==i),'time_step']
func_data1 = rbind(func_data1, t(x1))
}
#pressure
func_data4=data.frame()
for(i in unique(train_until1$breath_id) ){
x4=train_until1[which(train_until1$breath_id==i), 'pressure']
func_data4 = rbind(func_data4, t(x4))
}
grid <-  seq( 1, 30)
f_data4 <- fData(grid,func_data4)
plot(f_data4,main="pressure")
#u_in
func_data2=data.frame()
for(i in unique(train_until1$breath_id) ){
x2=train_until1[which(train_until1$breath_id==i), 'u_in']
func_data2 = rbind(func_data2, t(x2))
}
grid <-  seq( 1, 30)
f_data2 <- fData(grid,func_data2)
plot(f_data2,main="in")
#clust
func_data5 = data.frame()
for(i in unique(train_until1$breath_id)){
x5 = train_until1[which(train_until1$breath_id==i),'clust']
func_data5 = rbind(func_data5, t(x5))
}
times = as.matrix(func_data1)
pr = as.matrix(func_data4)
uin = as.matrix(func_data2)
clu = as.matrix(func_data5)
x11()
par(mfrow=c(1,2))
matplot(t(times),t(pr), type='l', xlab='x', ylab='orig.func', col= clu)
matplot(t(times),t(uin), type='l', xlab='x', ylab='orig.func', col= clu)
tr_te <- rbind(ts_train, ts_test)
cl.e <- dist(tr_te[10:17], method='euclidean')
cl.ew <- hclust(cl.e, method='ward')
plot(cl.ew, main='euclidean-ward', hang=-0.1, xlab='', labels=F, cex=0.6, sub='')
rect.hclust(cl.ew, k=2)
cluster.ew <- cutree(cl.ew, k=2)
coph <- cophenetic(cl.ew)
cor(coph, cl.e)
j = 1
for(i in unique(train_until1$breath_id))
{
train_until1[which(train_until1$breath_id==i), 'clust'] = cluster.ew[j]
j = j+1
}
for(i in unique(test_until1$breath_id))
{
test_until1[which(test_until1$breath_id==i), 'clust'] = cluster.ew[j]
j = j+1
}
### VISUALIZATION
#time
func_data1=data.frame()
for(i in unique(train_until1$breath_id)  ){
x1=train_until1[which(train_until1$breath_id==i),'time_step']
func_data1 = rbind(func_data1, t(x1))
}
#pressure
func_data4=data.frame()
for(i in unique(train_until1$breath_id) ){
x4=train_until1[which(train_until1$breath_id==i), 'pressure']
func_data4 = rbind(func_data4, t(x4))
}
grid <-  seq( 1, 30)
f_data4 <- fData(grid,func_data4)
plot(f_data4,main="pressure")
#u_in
func_data2=data.frame()
for(i in unique(train_until1$breath_id) ){
x2=train_until1[which(train_until1$breath_id==i), 'u_in']
func_data2 = rbind(func_data2, t(x2))
}
grid <-  seq( 1, 30)
f_data2 <- fData(grid,func_data2)
plot(f_data2,main="in")
#clust
func_data5 = data.frame()
for(i in unique(train_until1$breath_id)){
x5 = train_until1[which(train_until1$breath_id==i),'clust']
func_data5 = rbind(func_data5, t(x5))
}
times = as.matrix(func_data1)
pr = as.matrix(func_data4)
uin = as.matrix(func_data2)
clu = as.matrix(func_data5)
x11()
par(mfrow=c(1,2))
matplot(t(times),t(pr), type='l', xlab='x', ylab='orig.func', col= clu)
matplot(t(times),t(uin), type='l', xlab='x', ylab='orig.func', col= clu)
library(fdakmapp)
tt <- rbind(train_until1, test_until1)
#time
time = data.frame()
for(i in unique(tt$breath_id)  ){
x1=tt[which(tt$breath_id==i),'time_step']
time = rbind(time, t(x1))
}
#u_in
uin = data.frame()
for(i in unique(tt$breath_id)  ){
x1=tt[which(tt$breath_id==i),'u_in']
uin = rbind(uin, t(x1))
}
times = as.matrix(time)
uins = as.matrix(uin)
# Plot of original functions
matplot(t(times), t(uins), type='l', xlab='time step', ylab='u in')
title ('Original functions')
x <- c()
y <- c()
for (i in unique(tt$breath_id))
{
t <- tt[which(tt$breath_id==i), 'time_step']
u <- tt[which(tt$breath_id==i), 'u_in']
x <- rbind(x, t)
y <- rbind(y, u)
}
set.seed(2304)
n_cluster=3
fdakma_shift <- kmap(
x=x, y=y, n_clust = n_cluster,
warping_method= 'shift'
similarity_method = 'pearson',
center_method = 'mean',
)
set.seed(2304)
n_cluster=3
fdakma_shift <- kmap(
x=x, y=y, n_clust = n_cluster,
warping_method= 'shift',
similarity_method = 'pearson',
center_method = 'mean'
)
kmap_show_results(fdakma_shift)
x11()
par(mfrow=c(3,n_cluster/3))
for (i in seq(1,n_cluster )){
clus = y[which(fdakma_shift$labels == i),1:30]
time = x[which(fdakma_shift$labels == i),1:30]
matplot(t(time),t(clus), type='l', xlab='x', ylab='orig.func', col= "grey")
}
fdakma_affine <- kma(
x=x, y=y, n.clust = 3,
warping_method = 'affine',
similarity_method = 'pearson',
center_method = 'mean',
show_iter = TRUE,
)
kma.show.results(fdakma_affine)
fdakma_affine <- kmap(
x=x, y=y, n.clust = 3,
warping_method = 'affine',
similarity_method = 'pearson',
center_method = 'mean'
)
kma.show.results(fdakma_affine)
x11()
par(mfrow=c(3,n_cluster/3))
for (i in seq(1,n_cluster )){
clus = y[which(fdakma_affine$labels == i),1:30]
time = x[which(fdakma_affine$labels == i),1:30]
matplot(t(time),t(clus), type='l', xlab='x', ylab='orig.func', col= "grey")
}
fdakma_affine <- kmap(
x=x, y=y, n_clust = n_cluster,
warping_method = 'affine',
similarity_method = 'pearson',
center_method = 'mean'
)
kma.show.results(fdakma_affine)
x11()
par(mfrow=c(3,n_cluster/3))
for (i in seq(1,n_cluster )){
clus = y[which(fdakma_affine$labels == i),1:30]
time = x[which(fdakma_affine$labels == i),1:30]
matplot(t(time),t(clus), type='l', xlab='x', ylab='orig.func', col= "grey")
}
fdakma_affine <- kmap(
x=x, y=y, n_clust = n_cluster,
warping_method = 'affine',
similarity_method = 'pearson',
center_method = 'mean'
)
kmap_show_results(fdakma_affine)
x11()
par(mfrow=c(3,n_cluster/3))
for (i in seq(1,n_cluster )){
clus = y[which(fdakma_affine$labels == i),]
time = x[which(fdakma_affine$labels == i),]
matplot(t(time),t(clus), type='l', xlab='x', ylab='orig.func', col= "grey")
}
library(gamm4)
library(RLRsim)
fm1 <- gamm4(pressure ~ s(u_in) + R + C + time_step,
data=train_until1,
random = ~ (1 | breath_id))
summary(fm1$gam) ## summary of gam
summary(fm1$mer) ## underlying mixed model
fm1 <- gamm4(pressure ~ s(u_in) + R + C + s(time_step),
data=train_until1,
random = ~ (1 | breath_id))
summary(fm1$gam) ## summary of gam
summary(fm1$mer) ## underlying mixed model
fm1 <- gamm4(pressure ~ s(u_in) + R + C + s(time_step)+ u_out,
data=train_until1,
random = ~ (1 | breath_id))
summary(fm1$gam) ## summary of gam
summary(fm1$mer) ## underlying mixed model
fm1 <- gamm4(pressure ~ s(u_in) + R + C + s(time_step)+ u_out,
data=train_until1,
random = ~ (u_in | breath_id))
summary(fm1$gam) ## summary of gam
summary(fm1$mer) ## underlying mixed model
fm1 <- gamm4(pressure ~ s(u_in) + R + C + s(time_step)+ u_out,
data=train_until1,
random = ~ (u_in + time_step| breath_id))
summary(fm1$gam) ## summary of gam
summary(fm1$mer) ## underlying mixed model
fm1 <- gamm4(pressure ~ s(u_in) + R + C + s(time_step)+ u_out,
data=train_s,
random = ~ (u_in + time_step| breath_id))
summary(fm1$gam) ## summary of gam
summary(fm1$mer) ## underlying mixed model
View(func_data1)
View(f_data2)
func_data[1,]
func_data1[1,]
plot(grid, func_data3[1])
#u_in
func_data1=data.frame()
for(i in seq(1,length(train_s$id),80) ){
x1=train_s[i:(i+79),6]
func_data1 = rbind(func_data1, t(x1))
}
grid <-  seq( 1, 80)
f_data1 <- fData(grid,func_data1)
#u_out
func_data2=data.frame()
for(i in seq(1,length(train_s$id),80) ){
x2=train_s[i:(i+79),7]
func_data2 = rbind(func_data2, t(x2))
}
grid <-  seq( 1, 80)
f_data2 <- fData(grid,func_data2)
#pressure
func_data3=data.frame()
for(i in seq(1,length(train_s$id),80) ){
x3=train_s[i:(i+79),8]
func_data3 = rbind(func_data3, t(x3))
}
grid <-  seq( 1, 80)
f_data3 <- fData(grid,func_data3)
x11()
par(mfcol = c(1,3))
plot(f_data1,main="in")
plot(f_data2,main="out")
plot(f_data3,main="pressure")
plot(grid, func_data3[1])
plot(grid, func_data3[1,])
###################### FUNCTIONs VISUALIZATION #######################
lines(grid, func_data3[1,])
lines(grid, func_data3[1,])
n=1
f1 <- fData(grid,func_data1[n,])
f2 <- fData(grid,func_data1[n,])
f3 <- fData(grid,func_data3[n,])
x11()
par(mfcol = c(1,3))
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
n=1
f1 <- fData(grid,func_data1[n,])
f2 <- fData(grid,func_data2[n,])
f3 <- fData(grid,func_data3[n,])
x11()
par(mfcol = c(1,3))
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
n=1
k=5
x11()
par(mfcol = c(k-n+1,3))
for (j in seq(n,k,1)){
f1 <- fData(grid,func_data1[j,])
f2 <- fData(grid,func_data2[j,])
f3 <- fData(grid,func_data3[j,])
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
}
seq(n,k,1)
n=1
k=5
x11()
par(mfrow = c(k-n+1,3))
for (j in seq(n,k,1)){
f1 <- fData(grid,func_data1[j,])
f2 <- fData(grid,func_data2[j,])
f3 <- fData(grid,func_data3[j,])
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
}
n=100
k=103
x11()
par(mfrow = c(k-n+1,3))
for (j in seq(n,k,1)){
f1 <- fData(grid,func_data1[j,])
f2 <- fData(grid,func_data2[j,])
f3 <- fData(grid,func_data3[j,])
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
}
n=100
k=103
x11()
par(mfrow = c(k-n+1,3))
for (j in seq(n,k,1)){
f1 <- fData(grid,func_data1[j,])
f2 <- fData(grid,func_data2[j,])
f3 <- fData(grid,func_data3[j,])
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
}
n=200
k=203
x11()
par(mfrow = c(k-n+1,3))
for (j in seq(n,k,1)){
f1 <- fData(grid,func_data1[j,])
f2 <- fData(grid,func_data2[j,])
f3 <- fData(grid,func_data3[j,])
plot(f1,main="in")
plot(f2,main="out")
plot(f3,main="pressure")
}
